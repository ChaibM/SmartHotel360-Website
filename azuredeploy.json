{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "env": {
            "defaultValue": "d",
            "type": "string",
            "allowedValues": [
                "d",
                "q",
                "p"
            ],
            "metadata": {
                "description": "The environment preffix for ressources."
            }
        },
        "projectName": {
            "defaultValue": "mad",
            "type": "string",
            "allowedValues": [
                "mad",
                "ps",
                "pt"
            ],
            "metadata": {
                "description": "The name of the project."
            }
        },
        "firstDeploy": {
            "defaultValue": false,
            "type": "bool",
            "metadata": {
                "description": "The value indicating the first deploy to the resource group."
            }
        },
        "location": {
            "defaultValue": "[resourceGroup().location]",
            "type": "string",
            "metadata": {
                "description": "The location for ressources."
            }
        },
        "subsidiary": {
            "defaultValue": "subsidiary",
            "type": "string",
            "metadata": {
                "description": "The subsidiary name."
            }
        },
        "functionAppName": {
            "defaultValue": "driver",
            "type": "string",
            "metadata": {
                "description": "The name of the function app to create."
            }
        },
        "databaseName": {
            "defaultValue": "MAD",
            "type": "string",
            "metadata": {
                "description": "The Cosmos database with users."
            }
        },
        "sqlsrvnameAdminLogin": {
            "minLength": 1,
            "type": "String"
        },
        "sqlsrvnameAdminLoginPassword": {
            "type": "SecureString"
        },
        "serviceBusQueuePath": {
            "defaultValue": "serviceBusQueuePath",
            "type": "String",
            "metadata": {
                "description": "The prefix for service bus queue."
            }
        },
        "subsidiaryManagementDatabaseName": {
            "defaultValue": "MAD",
            "type": "String",
            "metadata": {
                "description": "The SQL database name."
            }
        },
        "bookingCollectionName": {
            "defaultValue": "some string",
            "type": "string",
            "metadata": {
                "description": "The name of booking collection in Cosmos DB."
            }
        },
        "manualServicesSchedulesCollectionName": {
            "defaultValue": "some string",
            "type": "string",
            "metadata": {
                "description": "The name of manual services schedules collection in Cosmos DB."
            }
        },
        "userServiceBaseAddress": {
            "defaultValue": "some string",
            "type": "string",
            "metadata": {
                "description": "The endpoint of the user service api."
            }
        },
        "identityServerUrl": {
            "defaultValue": "identityServerUrl",
            "type": "string",
            "metadata": {
                "description": "IdentityServer URL."
            }
        },
        "throughput": {
            "type": "int",
            "defaultValue": 400,
            "minValue": 400,
            "maxValue": 1000000,
            "metadata": {
                "description": "The throughput for the container"
            }
        },
        "sla": {
            "type": "string",
            "defaultValue": "sla",
            "metadata": {
                "description": "The SLA parameter."
            }
        },
        "serviceModificationQueueName": {
            "type": "string",
            "defaultValue": "serviceModificationQueueName",
            "metadata": {
                "description": "The name for queue with service modifications."
            }
        },
        "jobResultFileName": {
            "type": "string",
            "metadata": {
                "description": "The name for the job result file."
            }
        },
        "sasUriMinutesActive": {
            "type": "string",
            "metadata": {
                "description": "The timeout before the SAS URI becomes unavailable (in minutes)."
            }
        },
        "WEBSITE_TIME_ZONE": {
            "defaultValue": "Website_time_zone",
            "type": "string",
            "metadata": {
                "description": "Timezone to use."
            }
        }
    },
    "variables": {
        "projectName": "[toLower(parameters('projectName'))]",
        "subsidiaryName": "[toLower(parameters('subsidiary'))]",
        "groupSuffix": "[substring(uniquestring(resourceGroup().id),0,5)]",
        "sqlsrvName": "[concat(parameters('env'), '-', variables('projectName'), '-sql-srv-', variables('subsidiaryName'), '-', variables('groupSuffix'))]",
        "keyVaultName": "[concat(parameters('env'), '-', variables('projectName'), '-kv-', variables('subsidiaryName'), '-', variables('groupSuffix'))]",
        "functionAppName": "[concat(parameters('env'), '-', variables('projectName'), '-fa-', parameters('functionAppName'), '-', variables('groupSuffix'))]",
        "serviceBusNamespaceName": "[concat(parameters('env'), '-', variables('projectName'), '-sb-', variables('subsidiaryName'), '-', variables('groupSuffix'))]",
        "storageAccountName": "[replace(concat(parameters('env'), variables('projectName'), 'sa', parameters('functionAppName'), variables('groupSuffix')),'-','')]",
        "dataLakeAccountName": "[replace(concat(parameters('env'), variables('projectName'), 'datalake', variables('subsidiaryName'), variables('groupSuffix')),'-','')]",
        "applicationInsightsName": "[concat(parameters('env'), '-', variables('projectName'), '-appins-', parameters('functionAppName'), '-', variables('groupSuffix'))]",
        "functionsWebFarmName": "[concat(parameters('env'),'-', variables('projectName'), '-asp-', parameters('functionAppName'), '-', variables('groupSuffix'))]",
        "resourceTags": {
            "environment": "[parameters('env')]",
            "program": "[toUpper(parameters('projectName'))]",
            "sla": "[parameters('sla')]",
            "appli": "[concat(parameters('projectName'),'-', variables('subsidiaryName'))]",
            "subsidiary": "[variables('subsidiaryName')]"
        },
        "accountName": "[concat(parameters('env'),'-', variables('projectName'),'-', 'cosmos','-', variables('subsidiaryName'), '-', variables('groupSuffix'))]",
        "cosmosDatabaseName": "[parameters('subsidiary')]",
        "cosmosDBLocations": [
            {
                "locationName": "[parameters('location')]",
                "failoverPriority": 0,
                "isZoneRedundant": false
            }
        ],

        "sbVersion": "2017-04-01",
        "keyVaultVersion": "2018-02-14",
        "sbListenOnlyKeyName": "ListenSB",

        "storageAccountSecretName": "[concat('driver','StorageAccountName','Secret')]",
        "cosmosConnectionStringSecretName": "[concat('cosmosConnectionString', 'Secret')]",
        "databaseSecretKeySecretName": "[concat('databaseSecretKey', 'Secret')]",
        "dbConnectionStringSecretName": "[concat('dbConnectionSM','Secret')]",
        "serviceBusConnectionSecretName": "[concat('serviceBusConnection', 'Secret')]",
        "dataLakeAccountKeySecretName": "[concat('dataLakeAccountKey','Secret')]",

        "dataLakeAccountResourceId": "[resourceId('Microsoft.Storage/storageAccounts', variables('dataLakeAccountName'))]",
        "dataLakeAccountKeySecretResourceId": "[resourceId(resourceGroup().name, 'Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), variables('dataLakeAccountKeySecretName'))]",
        "serviceBusConnectionSecretResourceId": "[resourceId(resourceGroup().name, 'Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), variables('serviceBusConnectionSecretName'))]",
        "storageAccountResourceId": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
        "storageAccountSecretResourceId": "[resourceId(resourceGroup().name, 'Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), variables('storageAccountSecretName'))]",
        "dbConnectionStringSecretResourceId": "[resourceId(resourceGroup().name, 'Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), variables('dbConnectionStringSecretName'))]",
        "cosmosConnectionStringSecretResourceId": "[resourceId(resourceGroup().name, 'Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), variables('cosmosConnectionStringSecretName'))]",
        "databaseSecretKeySecretResourceId": "[resourceId(resourceGroup().name, 'Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), variables('databaseSecretKeySecretName'))]"
    },
    "resources": [
        {
            "apiVersion": "2014-04-01",
            "name": "[variables('applicationInsightsName')]",
            "type": "Microsoft.Insights/components",
            "location": "[parameters('location')]",
            "tags": "[variables('resourceTags')]",
            "properties": {
                "applicationId": "[variables('applicationInsightsName')]"
            }
        },
        {
            "apiVersion": "[variables('sbVersion')]",
            "name": "[variables('serviceBusNamespaceName')]",
            "type": "Microsoft.ServiceBus/namespaces",
            "location": "[parameters('location')]",
            "tags": "[variables('resourceTags')]",
            "properties": {},
            "resources": [
                {
                    "apiVersion": "[variables('sbVersion')]",
                    "name": "[parameters('serviceModificationQueueName')]",
                    "type": "Queues",
                    "dependsOn": [
                        "[concat('Microsoft.ServiceBus/namespaces/', variables('serviceBusNamespaceName'))]"
                    ],
                    "properties": {},
                    "resources": []
                },
                {
                    "type": "authorizationRules",
                    "apiVersion": "[variables('sbVersion')]",
                    "name": "[variables('sbListenOnlyKeyName')]",
                    "dependsOn": [
                        "[variables('serviceBusNamespaceName')]"
                    ],
                    "properties": {
                        "rights": [
                            "Listen"
                        ]
                    }
                }
            ]
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[variables('storageAccountName')]",
            "apiVersion": "2015-06-15",
            "location": "[parameters('location')]",
            "tags": "[variables('resourceTags')]",
            "properties": {
                "accountType": "Standard_LRS"
            }
        },
        {
            "comments": "consumption plan for functions",
            "type": "Microsoft.Web/serverfarms",
            "sku": {
                "name": "Y1",
                "tier": "Dynamic",
                "size": "Y1",
                "family": "Y",
                "capacity": 0
            },
            "kind": "functionapp",
            "name": "[variables('functionsWebFarmName')]",
            "apiVersion": "2016-09-01",
            "location": "[parameters('location')]",
            "tags": "[variables('resourceTags')]",
            "scale": null,
            "properties": {
                "name": "[variables('functionsWebFarmName')]",
                "perSiteScaling": false,
                "reserved": false,
                "targetWorkerCount": 0,
                "targetWorkerSizeId": 0
            },
            "dependsOn": []
        },
        {
            "type": "Microsoft.Sql/servers",
            "apiVersion": "2014-04-01-preview",
            "name": "[variables('sqlsrvName')]",
            "location": "[parameters('location')]",
            "dependsOn": [],
            "tags": "[variables('resourceTags')]",
            "properties": {
                "administratorLogin": "[parameters('sqlsrvnameAdminLogin')]",
                "administratorLoginPassword": "[parameters('sqlsrvnameAdminLoginPassword')]"
            },
            "resources": [
                {
                    "type": "firewallrules",
                    "apiVersion": "2014-04-01-preview",
                    "name": "AllowAllWindowsAzureIps",
                    "location": "[parameters('location')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Sql/servers', variables('sqlsrvName'))]"
                    ],
                    "properties": {
                        "startIpAddress": "0.0.0.0",
                        "endIpAddress": "0.0.0.0"
                    }
                },
                {
                    "type": "databases",
                    "apiVersion": "2014-04-01-preview",
                    "name": "[parameters('subsidiaryManagementDatabaseName')]",
                    "location": "[parameters('location')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Sql/servers', variables('sqlsrvName'))]"
                    ],
                    "tags": "[variables('resourceTags')]",
                    "properties": {
                        "collation": "SQL_Latin1_General_CP1_CI_AS",
                        "edition": "Basic",
                        "maxSizeBytes": "1073741824",
                        "requestedServiceObjectiveName": "Basic"
                    }
                }
            ]
        },
        {
            "type": "Microsoft.KeyVault/vaults",
            "apiVersion": "[variables('keyVaultVersion')]",
            "name": "[variables('keyVaultName')]",
            "location": "[parameters('location')]",
            "tags": "[variables('resourceTags')]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]"
            ],
            "properties": {
                "enabledForDeployment": "true",
                "enabledForDiskEncryption": "false",
                "enabledForTemplateDeployment": "false",
                "createMode": "[if(parameters('firstDeploy'), 'create', 'recover')]",
                "tenantId": "[subscription().tenantId]",
                "sku": {
                    "name": "Standard",
                    "family": "A"
                },
                "accessPolicies": "[if(parameters('firstDeploy'), json('[]'), json('null'))]"
            },
            "resources": [
                {
                    "type": "secrets",
                    "apiVersion": "[variables('keyVaultVersion')]",
                    "name": "[variables('storageAccountSecretName')]",
                    "location": "[parameters('location')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults/', variables('keyVaultName'))]",
                        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
                    ],
                    "properties": {
                        "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(variables('storageAccountResourceId'),'2015-05-01-preview').key1)]"
                    }
                },
                {
                    "type": "secrets",
                    "apiVersion": "[variables('keyVaultVersion')]",
                    "name": "[variables('cosmosConnectionStringSecretName')]",
                    "location": "[parameters('location')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults/', variables('keyVaultName'))]",
                        "[resourceId('Microsoft.DocumentDB/databaseAccounts',variables('accountName'))]"
                    ],
                    "properties": {
                        "value": "[concat('https://', variables('accountName'),'.documents.azure.com:443/')]"
                    }
                },
                {
                    "type": "secrets",
                    "apiVersion": "[variables('keyVaultVersion')]",
                    "name": "[variables('serviceBusConnectionSecretName')]",
                    "location": "[parameters('location')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults/', variables('keyVaultName'))]",
                        "[resourceId('Microsoft.ServiceBus/namespaces', variables('serviceBusNamespaceName'))]"
                    ],
                    "properties": {
                        "value": "[listKeys(resourceId(concat('Microsoft.ServiceBus/namespaces/AuthorizationRules'),variables('serviceBusNamespaceName'), 'RootManageSharedAccessKey'), variables('sbVersion')).primaryConnectionString]"
                    }
                },
                {
                    "type": "secrets",
                    "apiVersion": "[variables('keyVaultVersion')]",
                    "name": "[variables('databaseSecretKeySecretName')]",
                    "location": "[parameters('location')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults/', variables('keyVaultName'))]",
                        "[resourceId('Microsoft.DocumentDB/databaseAccounts',variables('accountName'))]"
                    ],
                    "properties": {
                        "value": "[listKeys(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('accountName')), '2020-04-01').primaryMasterKey]"
                    }
                },
                {
                    "type": "secrets",
                    "apiVersion": "[variables('keyVaultVersion')]",
                    "name": "[variables('dbConnectionStringSecretName')]",
                    "location": "[parameters('location')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults/', variables('keyVaultName'))]",
                        "[resourceId('Microsoft.Sql/servers', variables('sqlsrvName'))]"
                    ],
                    "properties": {
                        "value": "[concat('Data Source=tcp:', reference(concat('Microsoft.Sql/servers/', variables('sqlsrvName'))).fullyQualifiedDomainName, ',1433;Initial Catalog=', parameters('subsidiaryManagementDatabaseName'), ';User Id=', parameters('sqlsrvnameAdminLogin'), '@', reference(concat('Microsoft.Sql/servers/', variables('sqlsrvName'))).fullyQualifiedDomainName, ';Password=', parameters('sqlsrvnameAdminLoginPassword'), ';')]"
                    }
                },
                {
                    "type": "secrets",
                    "apiVersion": "[variables('keyVaultVersion')]",
                    "name": "[variables('dataLakeAccountKeySecretName')]",
                    "location": "[parameters('location')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults/', variables('keyVaultName'))]",
                        "[resourceId('Microsoft.Storage/storageAccounts', variables('dataLakeAccountName'))]"
                    ],
                    "properties": {
                        "value": "[listKeys(variables('dataLakeAccountResourceId'),'2015-05-01-preview').key1]"
                    }
                }
            ]
        },
        {
            "type": "Microsoft.KeyVault/vaults/accessPolicies",
            "name": "[concat(variables('keyVaultName'), '/add')]",
            "apiVersion": "[variables('keyVaultVersion')]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults/', variables('keyVaultName'))]"
            ],
            "properties": {
                "accessPolicies": [
                    {
                        "tenantId": "[reference(resourceId('Microsoft.Web/sites', variables('functionAppName')), '2018-11-01', 'Full').identity.tenantId]",
                        "objectId": "[reference(resourceId('Microsoft.Web/sites', variables('functionAppName')), '2018-11-01', 'Full').identity.principalId]",
                        "permissions": {
                            "secrets": [
                                "get",
                                "list"
                            ]
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2020-08-01-preview",
            "name": "[variables('dataLakeAccountName')]",
            "tags": "[variables('resourceTags')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Standard_RAGRS",
                "tier": "Standard"
            },
            "kind": "StorageV2",
            "properties": {
                "minimumTlsVersion": "TLS1_2",
                "allowBlobPublicAccess": true,
                "isHnsEnabled": true,
                "networkAcls": {
                    "bypass": "AzureServices",
                    "virtualNetworkRules": [],
                    "ipRules": [],
                    "defaultAction": "Allow"
                },
                "supportsHttpsTrafficOnly": true,
                "encryption": {
                    "services": {
                        "file": {
                            "keyType": "Account",
                            "enabled": true
                        },
                        "blob": {
                            "keyType": "Account",
                            "enabled": true
                        }
                    },
                    "keySource": "Microsoft.Storage"
                },
                "accessTier": "Hot"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices",
            "apiVersion": "2020-08-01-preview",
            "name": "[concat(variables('dataLakeAccountName'), '/default')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('dataLakeAccountName'))]"
            ],
            "sku": {
                "name": "Standard_RAGRS",
                "tier": "Standard"
            },
            "properties": {
                "cors": {
                    "corsRules": []
                },
                "deleteRetentionPolicy": {
                    "enabled": false
                }
            }
        },
        {
            "type": "Microsoft.Web/sites",
            "apiVersion": "2016-08-01",
            "name": "[variables('functionAppName')]",
            "location": "[parameters('location')]",
            "tags": "[variables('resourceTags')]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', variables('functionsWebFarmName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
            ],
            "kind": "functionapp",
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('functionsWebFarmName'))]"
            },
            "resources": [
                {
                    "type": "config",
                    "apiVersion": "2015-08-01",
                    "name": "web",
                    "dependsOn": [
                        "[resourceId('Microsoft.Web/Sites', variables('functionAppName'))]"
                    ],
                    "properties": {
                        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('functionsWebFarmName'))]"
                    }
                },
                {
                    "type": "config",
                    "apiVersion": "2015-08-01",
                    "name": "appsettings",
                    "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]",
                        "[resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))]",
                        "[resourceId('Microsoft.KeyVault/vaults/', variables('keyVaultName'))]",
                        "[resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), variables('storageAccountSecretName'))]",
                        "[resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), variables('dataLakeAccountKeySecretName'))]",
                        "[resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), variables('cosmosConnectionStringSecretName'))]",
                        "[resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), variables('serviceBusConnectionSecretName'))]",
                        "[resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), variables('databaseSecretKeySecretName'))]",
                        "[resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), variables('dbConnectionStringSecretName'))]"
                    ],
                    "properties": {
                        "AzureWebJobsDashboard": "[concat('@Microsoft.KeyVault(SecretUri=', reference(variables('storageAccountSecretResourceId'),'2015-06-01').secretUriWithVersion, ')')]",
                        "AzureWebJobsStorage": "[concat('@Microsoft.KeyVault(SecretUri=', reference(variables('storageAccountSecretResourceId'),'2015-06-01').secretUriWithVersion, ')')]",
                        "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING": "[concat('@Microsoft.KeyVault(SecretUri=', reference(variables('storageAccountSecretResourceId'),'2015-06-01').secretUriWithVersion, ')')]",
                        "WEBSITE_CONTENTSHARE": "[toLower(variables('functionAppName'))]",
                        "FUNCTIONS_EXTENSION_VERSION": "~3",
                        "CosmosConnectionString": "[concat('@Microsoft.KeyVault(SecretUri=', reference(variables('cosmosConnectionStringSecretResourceId'), '2015-06-01').secretUriWithVersion, ')')]",
                        "DatabaseSecretKey": "[concat('@Microsoft.KeyVault(SecretUri=', reference(variables('databaseSecretKeySecretResourceId'), '2015-06-01').secretUriWithVersion, ')')]",
                        "DatabaseName": "[parameters('databaseName')]",
                        "APPINSIGHTS_INSTRUMENTATIONKEY": "[reference(resourceId('microsoft.insights/components/', variables('applicationInsightsName')), '2015-05-01').InstrumentationKey]",
                        "DbConnectionString": "[concat('@Microsoft.KeyVault(SecretUri=', reference(variables('dbConnectionStringSecretResourceId'),'2015-06-01').secretUriWithVersion, ')')]",
                        "ServiceBusConnection": "[concat('@Microsoft.KeyVault(SecretUri=', reference(variables('serviceBusConnectionSecretResourceId'), '2015-06-01').secretUriWithVersion, ')')]",
                        "BookingCollectionName": "[parameters('bookingCollectionName')]",
                        "ManualServicesSchedulesCollectionName": "[parameters('manualServicesSchedulesCollectionName')]",
                        "UserServiceBaseAddress": "[parameters('userServiceBaseAddress')]",
                        "IdentityServerUrl": "[parameters('identityServerUrl')]",
                        "ServiceModificationQueueName": "[parameters('serviceModificationQueueName')]",
                        "ServiceBusQueuePath": "[parameters('serviceBusQueuePath')]",
                        "DataLakeAccountName": "[variables('dataLakeAccountName')]",
                        "DataLakeAccountKey": "[concat('@Microsoft.KeyVault(SecretUri=', reference(variables('dataLakeAccountKeySecretResourceId'), '2015-06-01').secretUriWithVersion, ')')]",
                        "JobResultFileName": "[parameters('jobResultFileName')]",
                        "SasUriMinutesActive": "[parameters('sasUriMinutesActive')]",
                        "SubsidiaryName": "[variables('subsidiaryName')]",
                        "WEBSITE_TIME_ZONE": "[parameters('WEBSITE_TIME_ZONE')]"
                    }
                }
            ]
        },
        {
            "type": "Microsoft.DocumentDB/databaseAccounts",
            "name": "[variables('accountName')]",
            "apiVersion": "2020-04-01",
            "location": "[parameters('location')]",
            "properties": {
                "consistencyPolicy": {
                    "defaultConsistencyLevel": "Session"
                },
                "databaseAccountOfferType": "Standard",
                "locations": "[variables('cosmosDBLocations')]"
            }
        },
        {
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
            "name": "[concat(variables('accountName'), '/', variables('cosmosDatabaseName'))]",
            "apiVersion": "2020-04-01",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('accountName'))]"
            ],
            "properties": {
                "resource": {
                    "id": "[variables('cosmosDatabaseName')]"
                }
            }
        },
        {
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
            "name": "[concat(variables('accountName'), '/', variables('cosmosDatabaseName'), '/', parameters('bookingCollectionName'))]",
            "apiVersion": "2020-04-01",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', variables('accountName'), variables('cosmosDatabaseName'))]"
            ],
            "properties": {
                "resource": {
                    "id": "[parameters('bookingCollectionName')]",
                    "indexingPolicy": {
                        "indexingMode": "consistent",
                        "automatic": true,
                        "includedPaths": [
                            {
                                "path": "/*"
                            }
                        ],
                        "excludedPaths": [
                            {
                                "path": "/\"_etag\"/?"
                            }
                        ]
                    },
                    "partitionKey": {
                        "paths": [
                            "/id"
                        ],
                        "kind": "Hash"
                    },
                    "conflictResolutionPolicy": {
                        "mode": "LastWriterWins",
                        "conflictResolutionPath": "/_ts"
                    }
                },
                "options": { "throughput": "[parameters('throughput')]" }
            }
        },
        {
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
            "name": "[concat(variables('accountName'), '/', variables('cosmosDatabaseName'), '/', parameters('manualServicesSchedulesCollectionName'))]",
            "apiVersion": "2020-04-01",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', variables('accountName'), variables('cosmosDatabaseName'))]"
            ],
            "properties": {
                "resource": {
                    "id": "[parameters('manualServicesSchedulesCollectionName')]",
                    "indexingPolicy": {
                        "indexingMode": "consistent",
                        "automatic": true,
                        "includedPaths": [
                            {
                                "path": "/*"
                            }
                        ],
                        "excludedPaths": [
                            {
                                "path": "/\"_etag\"/?"
                            }
                        ]
                    },
                    "partitionKey": {
                        "paths": [
                            "/id"
                        ],
                        "kind": "Hash"
                    },
                    "conflictResolutionPolicy": {
                        "mode": "LastWriterWins",
                        "conflictResolutionPath": "/_ts"
                    }
                },
                "options": { "throughput": "[parameters('throughput')]" }
            }
        }
    ],
    "outputs": {
        "functionAppName": {
            "type": "string",
            "value": "[variables('functionAppName')]"
        }
    }
}